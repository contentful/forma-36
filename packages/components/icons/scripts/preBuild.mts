/* eslint-disable no-console -- allow loggin in this script */
import path from 'node:path';
import fs from 'node:fs/promises';

const srcDirectories = ['custom', 'vendor'] as const;
const template = `/**
 * This file is autogenerated by the pre-build script, don't change it manually.
 */

export type {
  GeneratedIconProps as IconProps,
  IconComponent,
  IconSize,
  IconVariant,
} from '@contentful/f36-icon-alpha';\n\n`;

function buildExport(path: string) {
  const file = path.replace('.tsx', '.js');
  return `export * from './${file}';\n`;
}

async function findIconExportsInDirectory(
  directoryPath: string,
): Promise<string[]> {
  const contents = await fs.readdir(directoryPath);

  const iconExports = await Promise.all(
    contents.map(async (content) => {
      const contentPath = path.join(directoryPath, content);
      const stat = await fs.stat(contentPath);

      if (stat.isDirectory()) {
        return findIconExportsInDirectory(contentPath);
      } else {
        // We want the script to export paths relative to the src directory
        const relativePath = path.join(
          path.relative(path.join('.', 'src'), directoryPath),
          content,
        );
        return buildExport(relativePath);
      }
    }),
  );

  return iconExports.flat();
}

async function main() {
  try {
    const iconExports = await Promise.all(
      srcDirectories.map(async (directory) => {
        const iconsInDir = await findIconExportsInDirectory(
          path.join('.', 'src', directory),
        );

        return iconsInDir;
      }),
    );
    const exportString = iconExports.flat().join(``);
    const file = template + exportString;

    await fs.writeFile(path.join('.', 'src/index.ts'), file, {
      encoding: 'utf-8',
    });
  } catch (error: unknown) {
    if (error) {
      console.log('Error writing icons index file:');
      console.log(error);
    }
  }
}

await main();
