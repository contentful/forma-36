/* eslint-disable no-console -- allow loggin in this script */
import path from 'node:path';
import fs from 'node:fs/promises';

const srcDirectories = ['custom', 'vendor'] as const;

let template = `/**
 * This file is autogenerated by a build script, don't change it manually.
 */

export type {
  GeneratedIconProps as IconProps,
  IconComponent,
  IconSize,
  IconVariant,
} from '@contentful/f36-icon';\n\n`;

function buildExport(path: string) {
  const file = path.replace('.tsx', '.js');
  return `export * from './${file}';\n`;
}

function addToTemplate(template: string, string: string) {
  return template + string;
}

async function traverseDirectory(directoryPath: string) {
  const contents = await fs.readdir(directoryPath);

  for (const content of contents) {
    const contentPath = path.join(directoryPath, content);
    const stat = await fs.stat(contentPath);

    if (stat.isDirectory()) {
      return traverseDirectory(contentPath);
    } else {
      // We want the script to export paths relative to the src directory
      const relativePath = path.join(
        path.relative(path.join('.', 'src'), directoryPath),
        content,
      );
      const iconExport = buildExport(relativePath);

      template = addToTemplate(template, iconExport);
    }
  }
}

async function main() {
  try {
    for (const directory of srcDirectories) {
      await traverseDirectory(path.join('.', 'src', directory));
    }

    await fs.writeFile(path.join('.', 'src/index.ts'), template, {
      encoding: 'utf-8',
    });
  } catch (error: unknown) {
    if (error) {
      console.log('Error writing icons index file:');
      console.log(error);
    }
  }
}

await main();
